apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "bluegreen", "namespace": "", "kind":
      "DeploymentConfig"}]'
  creationTimestamp: null
  labels:
    app: bluegreen-pipeline
    name: bluegreen-pipeline
  name: bluegreen-pipeline
spec:
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: "#!groovy\ndef appName=\"bluegreen\"\ndef tag=\"blue\"\ndef altTag=\"green\"
        \       \n\nnode {\n  def project = getProjectName()\n  \n  stage(\"Initialize\")
        {\n    sh \"oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name
        }' > activeservice\"\n    activeService = readFile('activeservice').trim()\n
        \   if (activeService == \"blue\") {\n      tag = \"green\"\n      altTag
        = \"blue\"\n    }\n    sh \"oc get route ${tag} -n ${project} -o jsonpath='{
        .spec.host }' > routehost\"\n    routeHost = readFile('routehost').trim()\n
        \ }\n\n  stage(\"Build\") {\n    echo \"building tag ${tag}\"\n    openshiftBuild
        buildConfig: \"${tag}\", showBuildLogs: \"true\"\n  }\n\n  stage(\"Deploy
        Test\") {\n    openshiftTag srcStream: \"${tag}\", srcTag: 'latest', destinationStream:
        \"${tag}\", destinationTag: 'latest'\n    openshiftVerifyDeployment deploymentConfig:
        \"${tag}\"\n  }\n\n  stage(\"Test\") {\n    input message: \"Test deployment:
        http://${routeHost}. Approve?\", id: \"approval\"\n  }\n\n  stage(\"Go Live\")
        {\n    def patch1 = $/oc patch route/bluegreen -p $'{\\\"spec\\\":{\\\"to\\\":{\\\"name\\\":\\\"${tag}\\\"}}}$'
        -n ${project}/$\n    sh patch1\n  }\n\n  stage(\"Rollback\") {\n    sh \"oc
        get route ${altTag} -n ${project} -o jsonpath='{ .spec.host }' > routehost\"\n
        \   routeHost = readFile('routehost').trim()\n    def patch2 = $/oc patch
        route/bluegreen -p $'{\\\"spec\\\":{\\\"to\\\":{\\\"name\\\":\\\"${altTag}\\\"}}}$'
        -n ${project}/$            \n    try {\n      input message: \"Rollback deployment:
        http://${routeHost}. Approve?\", id: \"approval\"\n      echo \"rolling back
        to ${tag}\"\n      sh patch2\n    } catch (error) {\n      echo \"rollback
        aborted\"\n    }\n  }\n}\n\ndef getProjectName(){\n    def cmd1 = $/project=$(oc
        get project -o name);echo $${project##project*/} > projectName/$\n    sh cmd1\n
        \   name = readFile('projectName').trim()\n    sh 'rm projectName'\n    return
        name\n}\n"
    type: JenkinsPipeline
  triggers:
  - github:
      secret: secret101
    type: GitHub
  - generic:
      secret: secret101
    type: Generic
status:
  lastVersion: 0
